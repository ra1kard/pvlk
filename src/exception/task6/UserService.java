package exception.task6;

/**
 * üü† –í—Å—è –ª–æ–≥–∏–∫–∞ —Å–≤—è–∑ —Å –≤–æ–∑–º –∏–ª–∏ –Ω–µ–≤–æ–∑–º –≤—ã–ø –æ–ø–µ—Ä–∞—Ü–∏–π, –≥–µ–Ω –∏–ª–∏ –æ–±—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * ‚úÖ –ø—Ä–∏ —ç—Ç–æ–º –≤ –∫–ª–∞—Å—Å–µ —Å–µ—Ä–≤–∏—Å–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∏–Ω—Ñ –æ —Å—á–µ—Ç–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö,
 * ‚úÖ –∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—è UserRepository –∏ AccountRepository
 * üü† –∏–º–µ–Ω–Ω–æ —Å–µ—Ä–≤–∏—Å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ª–æ–≥–∏–∫–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö —Å—á–µ—Ç–∞–º–∏
 */
public class UserService {
    private UserRepository userRepository;
    private AccountRepository accountRepository;

    UserService(UserRepository userRepository, AccountRepository accountRepository) {
        this.userRepository = userRepository;
        this.accountRepository = accountRepository;
    }

    public void transferMoney(Integer idFromUser, Integer idToUser, Integer idFromAccount, Integer idToAccount, double amount) {
        try {
            userRepository.getUserById(idFromUser);
            userRepository.getUserById(idToUser);
            try {
                accountRepository.getAccountByNumber(idFromAccount).getBalance();   //–ø–æ–π–º–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
                accountRepository.getAccountByNumber(idToAccount).getBalance();     //–ø–æ–π–º–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
                try {
                    validateAmountAccount(accountRepository.getAccountByNumber(idFromAccount), amount);
                    accountRepository.getAccountByNumber(idFromAccount).withdraw(amount);
                    accountRepository.getAccountByNumber(idToAccount).deposit(amount);
                    System.out.println("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                } catch (NotEnoughAmountAccountException e) {
                    throw new NotEnoughAmountAccountException("Wrong! Amount is not enough!");
                }
            } catch (NullPointerException e) {
                System.out.println("Account not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
            }
        } catch (NullPointerException e) {
            System.out.println("User not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        }
    }

    public void validateAmountAccount(Account account, Double amount) throws NotEnoughAmountAccountException {
        if ((account.getTypeAccount() == TypeAccount.DEPOSIT || account.getTypeAccount() == TypeAccount.SAVING)
                && (account.getBalance() - amount) < 0) {
            throw new NotEnoughAmountAccountException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ");
        } else if (account.getTypeAccount() == TypeAccount.CREDIT
                && (account.getBalance() - amount) < account.getCreditLimit()) {
            throw new NotEnoughAmountAccountException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ");
        }
    }

    public int refuelCar(boolean WithdrawBonus, int liters, int costForLiter, Integer idFromAccount, Integer idFromUser) {
        int res = 0;
        if (WithdrawBonus) {
            try {
                userRepository.getUserById(idFromUser);
                try {
                    accountRepository.getAccountByNumber(idFromAccount).getBalance();   //–ø–æ–π–º–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
                    res = (int) (liters
                            * costForLiter
                            - accountRepository.getAccountByNumber(idFromAccount).spendBalanceLoyalty());
                } catch (NullPointerException e) {
                    System.out.println("Account not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                }
            } catch (NullPointerException e) {
                System.out.println("User not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
            }
        } else {
            try {
                userRepository.getUserById(idFromUser);
                try {
                    accountRepository.getAccountByNumber(idFromAccount).getBalance();   //–ø–æ–π–º–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è

                    accountRepository.getAccountByNumber(idFromAccount).addBalanceLoyalty(liters, costForLiter);
                    res = liters * costForLiter;

                } catch (NullPointerException e) {
                    System.out.println("Account not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
                }
            } catch (NullPointerException e) {
                System.out.println("User not found, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
            }
        }
        return res;
    }

}
